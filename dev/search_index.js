var documenterSearchIndex = {"docs":
[{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"(Image: Julia Logo)","category":"page"},{"location":"#DevOps-in-Julia","page":"DevOps in Julia","title":"DevOps in Julia","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Having very little experience with DevOps in general, I made this as a reference for the concepts and tools in DevOps in Julia.","category":"page"},{"location":"#Table-of-Contents","page":"DevOps in Julia","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"","category":"page"},{"location":"#Functions","page":"DevOps in Julia","title":"Functions","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"greet","category":"page"},{"location":"#DevOpsMWE.greet","page":"DevOps in Julia","title":"DevOpsMWE.greet","text":"greet()\n\nReturn a friendly greeting.\n\n\n\n\n\n","category":"function"},{"location":"#Index","page":"DevOps in Julia","title":"Index","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"","category":"page"},{"location":"#Introduction-to-DevOps","page":"DevOps in Julia","title":"Introduction to DevOps","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"DevOps is a combination of development and operations, aiming to bridge the gap between software development and IT operations. It is a set of practices and methodologies focused on improving collaboration, communication, and integration between development and operations teams. The goal of DevOps is to accelerate software delivery, enhance product quality, and streamline the development lifecycle.","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"DevOps is essential because it helps organizations respond more efficiently to changing market demands, improve collaboration between teams, and minimize the time from development to production.","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Some common DevOps practices include:","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Continuous Integration (CI): Automating the process of merging code changes and running tests to ensure the application's stability.\nContinuous Deployment (CD): Automating the process of deploying the application to production environments.\nAutomated Testing: Developing a suite of tests that run automatically to ensure code quality and functionality.\nInfrastructure as Code (IaC): Managing and provisioning infrastructure through code instead of manual processes.\nMonitoring and Logging: Collecting, analyzing, and visualizing application performance and operational data.\nVersion Control: Tracking changes to code and collaborating on projects using version control systems like Git.\nLinting and Formatting: Enforcing code style and quality standards through automated checks and formatting tools.\nDocumentation Generation: Automatically generating and updating project documentation.\nCode Coverage: Measuring the percentage of code covered by tests and reporting the results.","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"In this guide, we will cover the following DevOps practices:","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Setting up Unit Testing in Julia\nLinting in Julia\nFormatting/Style Enforcement in Julia\nDocumentation Generation in Julia\nCode Coverage in Julia (using Codecov)\nSetting up Pre-commit Hooks for Unit Testing, Linting, and Formatting\nSetting up GitHub Actions for Unit Testing, Linting, Formatting, Documentation Generation, and Code Coverage","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Some additional DevOps practices that we will not cover in this guide, but are worth considering, include:","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Continuous Deployment (CD)\nInfrastructure as Code (IaC)\nMonitoring and Logging","category":"page"},{"location":"#DevOps-in-JuliaLang","page":"DevOps in Julia","title":"DevOps in JuliaLang","text":"","category":"section"},{"location":"#Unit-Testing","page":"DevOps in Julia","title":"Unit Testing","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Create a test directory: In your Julia package, create a new directory named test. This is where you will place your test files.\nCreate a test file: Inside the test directory, create a new file named runtests.jl. This file will contain your test suite.\nImport the Test module: At the beginning of the runtests.jl file, import the Test module, which is part of Julia's standard library:\njulia  using Test\nWrite test cases: Write test cases for your package's functions using the @test macro. Here's an example of a simple test case for a function called add:\njulia  @test add(1, 2) == 3\nOrganize tests: For larger packages, you can create separate test files for each module or functionality, and include them in the runtests.jl file using the include function:\njulia  include(\"test_module1.jl\")  include(\"test_module2.jl\")\nRun the tests: To run your test suite, navigate to your package's directory in the Julia REPL and activate the package environment:\njulia  ] activate .\nThen, run the tests using the test command:\njulia  ] test\nThe tests will be executed, and the results will be displayed in the REPL.","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"By following these steps, you can create a test suite for your Julia package and run it directly from the REPL.","category":"page"},{"location":"#Linting","page":"DevOps in Julia","title":"Linting","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Linting in Julia can be performed using the Lint.jl package, which helps you identify and fix issues in your code.","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Install Lint.jl: To install the Lint.jl package, open the Julia REPL and enter the package manager mode by pressing ]. Then, run:\nadd Lint\nLoad Lint.jl: After installing the package, you can load it in your Julia session by running:\njulia  using Lint\nLint a single file: To lint a single Julia file, use the lintfile function. For example, to lint a file called example.jl, run:\njulia  lintfile(\"example.jl\")\nLint.jl will analyze the file and display any issues it finds.\nLint an entire project: To lint your entire Julia project, use the lintpkg function. Run:\njulia  lintpkg(\"YourPackageName\")\nReplace \"YourPackageName\" with the name of your package. Lint.jl will analyze all files in the package and display any issues it finds.","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"By following these steps, you can perform linting in Julia to identify and fix issues in your code. This will help you maintain a clean and consistent codebase.","category":"page"},{"location":"#Formatting/Style-Enforcement","page":"DevOps in Julia","title":"Formatting/Style Enforcement","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"In Julia, you can enforce a consistent style throughout your code using the JuliaFormatter package with a specific style (e.g., BlueStyle or YASStyle). To set up formatting and style enforcement, follow these steps:","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Install JuliaFormatter: In your Julia environment, install the JuliaFormatter package:\njulia  using Pkg  Pkg.add(\"JuliaFormatter\")\nChoose a style: Decide on the formatting style you'd like to enforce, such as BlueStyle or YASStyle. Install the chosen style package:\njulia  Pkg.add(\"BlueStyle\")  # Replace with \"YASStyle\" if you prefer that style.\nFormat your code: Format your code according to the chosen style using the following command:\njulia  using JuliaFormatter  format(\".\", BlueStyle())  # Replace with YASStyle() if you chose that style.\nThis command will format all the files in your package according to the chosen style.\nCommit the changes: After formatting your code, review the changes, and commit them to your repository.","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"By following these steps, you'll ensure that your Julia code adheres to a consistent style, making it easier to read, understand, and maintain.","category":"page"},{"location":"#Documentation-Generation","page":"DevOps in Julia","title":"Documentation Generation","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"In Julia, you can generate documentation for your package using the Documenter.jl package. To set up documentation generation, follow these steps:","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Install Documenter.jl: In your Julia environment, install the Documenter package:\njulia  using Pkg  Pkg.add(\"Documenter\")\nCreate a docs folder: In your package directory, create a docs folder to store your documentation files.\nSet up make.jl: Inside the docs folder, create a make.jl file with the following content, adjusting the ModuleName to your package's module name:\n```julia  using Documenter, ModuleName\nmakedocs(sitename=\"ModuleName\", modules=[ModuleName])  ```\nWrite documentation: Create .md files inside the docs/src folder to write your package's documentation. Use the Markdown format and include docstrings from your Julia source code.\nGenerate the documentation: In the terminal, navigate to the docs folder and run the following command to generate the documentation:\nbash  julia make.jl\nServe the documentation locally: To preview the generated documentation locally, you can use the Documenter.serve() function in your make.jl file:\n```julia  using Documenter, ModuleName\nmakedocs(sitename=\"ModuleName\", modules=[ModuleName])  serve()  ```\nThen, run julia make.jl in the terminal, and the documentation will be served at http://localhost:8000.","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"By following these steps, you'll be able to create and maintain documentation for your Julia package, making it easier for users to understand and utilize your code.","category":"page"},{"location":"#Code-Coverage-with-Codecov","page":"DevOps in Julia","title":"Code Coverage with Codecov™️","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"To track and display code coverage for your Julia package, you can use Codecov along with the Coverage.jl package. Follow these steps to set up code coverage with Codecov:","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Install the Coverage.jl package: In your Julia environment, add the Coverage package:\njulia  using Pkg  Pkg.add(\"Coverage\")\nRun tests with coverage: In your package directory, run your tests with coverage enabled:\nbash  julia --code-coverage test/runtests.jl\nGenerate coverage report: After running your tests, generate a coverage report using the Coverage.jl package:\njulia  using Coverage  cov_report = process_folder()\nSign up for Codecov: Go to Codecov.io and sign up using your GitHub account.\nAdd your repository: In Codecov, add your GitHub repository to start tracking code coverage.\nSubmit coverage report to Codecov: In your Julia code, use the submit() function from Coverage.jl to submit the coverage report to Codecov:\njulia  using Coverage  cov_report = process_folder()  Codecov.submit(cov_report)\nAdd Codecov token to your GitHub repository: In your GitHub repository settings, add the CODECOV_TOKEN as a secret. You can find this token in your Codecov repository settings.\nIntegrate with GitHub Actions: In your GitHub Actions workflow, add a step to run tests with coverage and submit the coverage report to Codecov. For example:\n```yaml\nname: Coverage run: |   julia –project -e 'using Pkg; Pkg.add(\"Coverage\"); using Coverage; Codecov.submit(Codecov.processfolder())' env:   CODECOVTOKEN: {{secrets.CODECOV_TOKEN}}\n```","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"By following these steps, you'll be able to track and display code coverage for your Julia package using Codecov, helping you identify areas of your code that need more tests and improve the overall quality of your package.","category":"page"},{"location":"#Automated-Unit-Testing","page":"DevOps in Julia","title":"Automated Unit Testing","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"DevOps steps are typically partially/fully automated.","category":"page"},{"location":"#Pre-commit-Hooks-for-Unit-Testing,-Linting,-and-Formatting","page":"DevOps in Julia","title":"Pre-commit Hooks for Unit Testing, Linting, and Formatting","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Setting up pre-commit hooks for unit testing, linting, and formatting helps ensure that your code adheres to the project's coding standards before committing changes to the repository. Here's how you can set up pre-commit hooks for Julia:","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Install the pre-commit package: Install the pre-commit package using pip:\nbash  pip install pre-commit\nCreate a pre-commit configuration file: In your project's root directory, create a .pre-commit-config.yaml file with the following content:\n```yaml  repos:\nrepo: local hooks:\nid: run-tests name: Run Tests entry: julia –project=test -e 'using Pkg; Pkg.instantiate(); include(\"runtests.jl\")' language: system files: '.jl$(Expr(:incomplete, \"incomplete: invalid character literal\"))\nid: lint name: Lint entry: julia –project=lint -e 'using Pkg; Pkg.instantiate(); using Lint; lintpkg(\".\")' language: system files: '.jl$(Expr(:incomplete, \"incomplete: invalid character literal\"))\nid: format name: Format entry: julia –project=format -e 'using Pkg; Pkg.instantiate(); using JuliaFormatter; format(\".\", BlueStyle(); verbose = true)' language: system files: '.jl$(Expr(:incomplete, \"incomplete: invalid character literal\"))\n```\nInstall pre-commit hooks: In your project's root directory, run the following command to install the pre-commit hooks:\nbash  pre-commit install","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"With this setup, pre-commit hooks will run unit tests, linting, and formatting checks before each commit. If any of the checks fail, the commit will be blocked, and you will need to fix the issues before retrying the commit.","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Copy the entire snippet above and paste it into your documentation as needed.","category":"page"},{"location":"#Github-Actions","page":"DevOps in Julia","title":"Github Actions","text":"","category":"section"},{"location":"#Unit-testing","page":"DevOps in Julia","title":"Unit testing","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"To set up unit testing, we created a GitHub Actions workflow that runs the tests automatically on specified triggers.","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Create a new workflow file: In the .github/workflows directory of your repository, create a file named test.yml.\nDefine the workflow: Add the following content to the test.yml file:\nyaml  name: CI  on:    push:      branches:        - main      tags: ['*']    pull_request:  concurrency:    group: ${{ github.workflow }}-${{ github.ref }}    cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}  jobs:    test:      name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}      runs-on: ${{ matrix.os }}      strategy:        fail-fast: false        matrix:          version:            - '1.8'            - 'nightly'          os:            - ubuntu-latest          arch:            - x64      steps:        - uses: actions/checkout@v2        - uses: julia-actions/setup-julia@v1.6.0          with:            version: ${{ matrix.version }}            arch: ${{ matrix.arch }}        - uses: julia-actions/cache@v1        - uses: julia-actions/julia-buildpkg@v1        - uses: julia-actions/julia-runtest@v1\nThis workflow is triggered on push events to the main branch, on tag pushes, and on pull requests. The test job is configured to run on different versions of Julia and on the ubuntu-latest operating system.\nCommit and push the workflow file: Once you have added the test.yml file to the .github/workflows directory, commit and push the changes to your repository. GitHub Actions will now automatically run the tests based on the specified triggers.","category":"page"},{"location":"#Linting-2","page":"DevOps in Julia","title":"Linting","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"To set up a linting GitHub action for a Julia project, follow these steps:","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Create a new workflow file: In your GitHub repository, create a new file under the .github/workflows directory. Name it lint.yml.\nConfigure the workflow: Add the following content to the lint.yml file:\n```yaml  name: Lint\non:    push:      branches:        - main    pull_request:\njobs:    lint:      runs-on: ubuntu-latest\n steps:\n   - uses: actions/checkout@v2\n   - uses: julia-actions/setup-julia@v1\n     with:\n       version: '1.8'\n   - name: Install dependencies\n     run: julia --project -e 'using Pkg; Pkg.add(\"Lint\"); Pkg.instantiate()'\n   - name: Run linting\n     run: julia --project -e 'using Lint; lintpkg(\".\")'\n```\nThis workflow is triggered on push and pull_request events for the main branch. It uses the julia-actions/setup-julia action to set up Julia 1.8 and installs the Lint.jl package. Then, it runs the linting on the entire package.\nCommit and push the changes: Commit the new lint.yml file and push the changes to your GitHub repository.","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"After completing these steps, the linting GitHub action will be set up for your Julia project. It will automatically check your code for issues on every push and pull request, helping you maintain a clean and consistent codebase.","category":"page"},{"location":"#Style-Enforcement-and-Formatting","page":"DevOps in Julia","title":"Style Enforcement and Formatting","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Setting up a GitHub action for style enforcement and formatting ensures that your code adheres to the project's coding standards when changes are pushed or pull requests are made. Here's how you can set up a GitHub action for style enforcement and formatting in Julia:","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Create a GitHub Actions workflow file: In your project's .github/workflows directory, create a new file named format.yml with the following content:\n```yaml  name: Code Formatting\non:    push:      branches:        - main    pull_request:\njobs:    format:      runs-on: ubuntu-latest      steps:        - uses: actions/checkout@v2        - uses: julia-actions/setup-julia@v1          with:            version: '1.8'        - run: julia -e 'using Pkg; Pkg.add([\"JuliaFormatter\", \"BlueStyle\"])'        - run: julia –project=. -e 'using JuliaFormatter; format(\".\", BlueStyle(); verbose = true)'        - name: Check for changes          run: |            git diff –exit-code  ```\nThis GitHub action is triggered on push and pull_request events. It uses the JuliaFormatter package along with the BlueStyle style to enforce the desired formatting.\nCommit and push the workflow file: Add the format.yml file to your repository, commit, and push the changes. The GitHub action will now be active and automatically enforce the specified code style whenever changes are pushed or pull requests are made.","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Copy the entire snippet above and paste it into your documentation as needed.","category":"page"},{"location":"#Documentation-Generation-2","page":"DevOps in Julia","title":"Documentation Generation","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Setting up a GitHub action for documentation generation ensures that your project's documentation is automatically updated whenever changes are pushed or pull requests are made. Here's how you can set up a GitHub action for documentation generation in Julia:","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Create a GitHub Actions workflow file: In your project's .github/workflows directory, create a new file named docs.yml with the following content:\n```yaml  name: Documentation\non:    push:      branches:        - main    pull_request:\njobs:    build:      runs-on: ubuntu-latest      steps:        - uses: actions/checkout@v2        - uses: julia-actions/setup-julia@v1          with:            version: '1.8'        - run: julia -e 'using Pkg; Pkg.add(\"Documenter\")'        - name: Build and deploy          env:            GITHUBTOKEN: $(Expr(:incomplete, \"incomplete: premature end of input\"))TOKEN }}            DOCUMENTERKEY: $(Expr(:incomplete, \"incomplete: premature end of input\"))KEY }}          run: |            julia –project=docs -e '              using Pkg              Pkg.develop(PackageSpec(path=pwd()))              Pkg.instantiate()'            julia –project=docs docs/make.jl  ```\nThis GitHub action is triggered on push and pull_request events. It uses the Documenter.jl package to build and deploy the project's documentation.\nCommit and push the workflow file: Add the docs.yml file to your repository, commit, and push the changes. The GitHub action will now be active and automatically generate and update the project's documentation whenever changes are pushed or pull requests are made.","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Copy the entire snippet above and paste it into your documentation as needed.","category":"page"},{"location":"#Code-Coverage-with-Codecov-2","page":"DevOps in Julia","title":"Code Coverage with Codecov™️","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Setting up a GitHub action for code coverage ensures that your project's code coverage is automatically updated whenever changes are pushed or pull requests are made. Here's how you can set up a GitHub action for code coverage in Julia:","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Create a GitHub Actions workflow file: In your project's .github/workflows directory, create a new file named coverage.yml with the following content:\n```yaml  name: Code Coverage\non:    push:      branches:        - main    pull_request:\njobs:    coverage:      runs-on: ubuntu-latest      steps:        - uses: actions/checkout@v2        - uses: julia-actions/setup-julia@v1          with:            version: '1.8'        - uses: julia-actions/julia-buildpkg@v1        - uses: julia-actions/julia-runtest@v1        - name: Coverage          run: |            julia -e 'using Pkg; Pkg.add(\"Coverage\"); using Coverage; Codecov.submit(Codecov.processfolder())'          env:            CODECOVTOKEN: {{secrets.CODECOV_TOKEN}}  ```\nThis GitHub action is triggered on push and pull_request events. It uses the Coverage.jl package to calculate the code coverage and submits the report to Codecov.\nSetup Codecov: Sign up for a Codecov account and add your repository. You'll receive a CODECOV_TOKEN. Add this token to your repository's secrets with the name CODECOV_TOKEN.\nCommit and push the workflow file: Add the coverage.yml file to your repository, commit, and push the changes. The GitHub action will now be active and automatically calculate and update the project's code coverage whenever changes are pushed or pull requests are made.","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"Copy the entire snippet above and paste it into your documentation as needed.","category":"page"},{"location":"#Badges-for-GitHub-Actions","page":"DevOps in Julia","title":"Badges for GitHub Actions","text":"","category":"section"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"To display badges for your GitHub actions, include the following markdown code in your README.md file:","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"[![Unit Tests](https://github.com/yourusername/yourrepository/actions/workflows/unit_tests.yml/badge.svg)](https://github.com/yourusername/yourrepository/actions/workflows/unit_tests.yml)\n[![Lint](https://github.com/yourusername/yourrepository/actions/workflows/lint.yml/badge.svg)](https://github.com/yourusername/yourrepository/actions/workflows/lint.yml)\n[![Format](https://github.com/yourusername/yourrepository/actions/workflows/format.yml/badge.svg)](https://github.com/yourusername/yourrepository/actions/workflows/format.yml)\n[![Documentation](https://github.com/yourusername/yourrepository/actions/workflows/docs.yml/badge.svg)](https://yourusername.github.io/yourrepository/)\n[![codecov](https://codecov.io/gh/yourusername/yourrepository/branch/main/graph/badge.svg)](https://codecov.io/gh/yourusername/yourrepository)","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"They look like these","category":"page"},{"location":"","page":"DevOps in Julia","title":"DevOps in Julia","text":"(Image: Documentation) (Image: Changelog) (Image: Test) (Image: codecov) (Image: Lint) (Image: Format) ","category":"page"}]
}
